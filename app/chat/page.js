"use client";

import { Loader2 } from "lucide-react";
import Link from "next/link";
import { useState } from "react";

export default function ChatPage() {
  const [symptoms, setSymptoms] = useState("");
  const [response, setResponse] = useState("");
  const [sources, setSources] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [detectedLanguage, setDetectedLanguage] = useState("");

  function filterResponse(response) {
    return response.replaceAll("**", "");
  }

  const detectLanguage = (text) => {
    const koreanRegex = /[Í∞Ä-Ìû£]/;
    const chineseRegex = /[‰∏Ä-ÈæØ]/;
    const japaneseRegex = /[„ÅÅ-„Çì„Ç°-„É≥]/;
    const arabicRegex = /[ÿ°-Ÿä]/;
    const russianRegex = /[–∞-—è]/i;

    if (koreanRegex.test(text)) return "Korean";
    if (chineseRegex.test(text)) return "Chinese";
    if (japaneseRegex.test(text)) return "Japanese";
    if (arabicRegex.test(text)) return "Arabic";
    if (russianRegex.test(text)) return "Russian";
    return "English";
  };

  const getUIText = (lang) => {
    const texts = {
      Korean: {
        title: "üè• AI ÏùòÎ£å ÏÉÅÎã¥",
        subtitle: "Ï¶ùÏÉÅÏùÑ ÏûÖÎ†•ÌïòÏãúÎ©¥ AIÍ∞Ä ÏÉÅÎã¥ÏùÑ ÎèÑÏôÄÎìúÎ¶ΩÎãàÎã§.",
        disclaimer:
          "‚ö†Ô∏è Ï†ïÌôïÌïú ÏßÑÎã®ÏùÑ ÏúÑÌï¥ÏÑúÎäî Î∞òÎìúÏãú ÏùòÎ£åÏßÑÏùò ÏßÑÎ£åÎ•º Î∞õÏúºÏãúÍ∏∞ Î∞îÎûçÎãàÎã§.",
        label: "Ï¶ùÏÉÅÏùÑ ÏûêÏÑ∏Ìûà ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî:",
        placeholder: "Ïòà: Ïñ¥Ï†úÎ∂ÄÌÑ∞ Î®∏Î¶¨Í∞Ä ÏïÑÌîÑÍ≥† Ïó¥Ïù¥ ÎÇòÎ©∞, Í∏∞Ïπ®ÎèÑ Ïã¨Ìï¥Ïöî...",
        submitBtn: "ü§ñ AI ÏÉÅÎã¥ Î∞õÍ∏∞",
        loadingBtn: "ÏÉÅÎã¥ Ï§ë...",
        clearBtn: "Ï¥àÍ∏∞Ìôî",
        errorTitle: "‚ùå Ïò§Î•ò",
        resultTitle: "üí¨ AI ÏÉÅÎã¥ Í≤∞Í≥º",
        warningTitle: "‚ö†Ô∏è Ï§ëÏöîÌïú ÏïàÎÇ¥",
        warningItems: [
          "Ïù¥ ÏÉÅÎã¥ÏùÄ Ï∞∏Í≥†Ïö©Ïù¥Î©∞ ÏùòÌïôÏ†Å ÏßÑÎã®ÏùÑ ÎåÄÏ≤¥Ìï† Ïàò ÏóÜÏäµÎãàÎã§.",
          "Ïã¨Í∞ÅÌïú Ï¶ùÏÉÅÏù¥Í±∞ÎÇò ÏùëÍ∏âÏÉÅÌô©Ïù¥ ÏùòÏã¨ÎêòÎ©¥ Ï¶âÏãú 119Ïóê Ïã†Í≥†ÌïòÍ±∞ÎÇò ÏùëÍ∏âÏã§ÏùÑ Î∞©Î¨∏ÌïòÏÑ∏Ïöî.",
          "Ï†ïÌôïÌïú ÏßÑÎã®Í≥º ÏπòÎ£åÎ•º ÏúÑÌï¥ Î∞òÎìúÏãú ÏùòÎ£åÏßÑÏùò ÏßÑÎ£åÎ•º Î∞õÏúºÏãúÍ∏∞ Î∞îÎûçÎãàÎã§.",
        ],
        emptyError: "Ï¶ùÏÉÅÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.",
        HospitalText: "ÎãπÏã†Ïùò Ï£ºÎ≥ÄÏùò Î≥ëÏõêÏùÑ Ï∂îÏ≤úÌï¥ÎìúÎ¶¥ÍπåÏöî?",
        HospitalLink: "ÎÑ§! Ï∂îÏ≤úÌï¥Ï£ºÏÑ∏Ïöî",
        sourceTitle: "üìö Ï∞∏Í≥† ÏûêÎ£å",
      },
      English: {
        title: "üè• AI Medical Consultation",
        subtitle: "Enter your symptoms and AI will help with consultation.",
        disclaimer:
          "‚ö†Ô∏è For accurate diagnosis, you must seek direct medical care from healthcare professionals.",
        label: "Please describe your symptoms in detail:",
        placeholder:
          "e.g., I have been experiencing headaches and fever since yesterday, and severe coughing...",
        submitBtn: "ü§ñ Get AI Consultation",
        loadingBtn: "Consulting...",
        clearBtn: "Clear",
        errorTitle: "‚ùå Error",
        resultTitle: "üí¨ AI Consultation Result",
        warningTitle: "‚ö†Ô∏è Important Notice",
        warningItems: [
          "This consultation is for reference only and cannot replace medical diagnosis.",
          "If you have serious symptoms or suspect an emergency, call emergency services immediately.",
          "For accurate diagnosis and treatment, you must seek direct medical care from healthcare professionals.",
        ],
        emptyError: "Please enter your symptoms.",
        HospitalText: "Would you like me to recommend hospitals near you?",
        HospitalLink: "Yes, please recommend.",
        sourceTitle: "üìö References",
      },
    };

    return texts[lang] || texts.English;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const currentLang = detectLanguage(symptoms);
    setDetectedLanguage(currentLang);
    const uiText = getUIText(currentLang);

    if (!symptoms.trim()) {
      setError(uiText.emptyError);
      return;
    }

    setLoading(true);
    setError("");
    setResponse("");
    setSources([]);

    try {
      const res = await fetch("/api/medical-consultation", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ symptoms, language: currentLang }),
      });

      if (!res.ok) throw new Error("Server error");

      const data = await res.json();
      setResponse(filterResponse(data.response));
      setSources(data.sources || []);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const clearForm = () => {
    setSymptoms("");
    setResponse("");
    setError("");
    setDetectedLanguage("");
    setSources([]);
  };

  const currentUILang =
    detectedLanguage || (symptoms ? detectLanguage(symptoms) : "Korean");
  const uiText = getUIText(currentUILang);

  return (
    <div className="max-w-[800px] mx-auto p-5 font-sans">
      <header className="text-center mb-8">
        <h1 className="text-[2.2rem] text-[#2c3e50] mb-2 font-bold">
          {uiText.title}
        </h1>
        <p className="text-[#7f8c8d] text-base mb-1">{uiText.subtitle}</p>
        <p className="text-[#e74c3c] text-sm font-bold">{uiText.disclaimer}</p>

        {detectedLanguage && (
          <div className="inline-block bg-[#3498db] text-white px-3 py-1 rounded-full text-xs mt-3">
            üåç Detected: {detectedLanguage}
          </div>
        )}
      </header>

      <form onSubmit={handleSubmit} className="mb-8">
        <div className="mb-5">
          <label
            htmlFor="symptoms"
            className="block mb-2 font-bold text-[#34495e]"
          >
            {uiText.label}
          </label>
          <textarea
            id="symptoms"
            value={symptoms}
            onChange={(e) => setSymptoms(e.target.value)}
            placeholder={uiText.placeholder}
            className="w-full min-h-[140px] p-4 border-2 border-[#e1e8ed] rounded-lg text-base leading-relaxed resize-y focus:border-[#3498db] outline-none transition"
          />
        </div>

        <div className="flex flex-wrap gap-3">
          <button
            type="submit"
            disabled={loading}
            className={`flex items-center justify-center gap-2 px-7 py-3 rounded-lg font-bold text-white transition flex-1 min-w-[180px] ${
              loading
                ? "bg-[#95a5a6] cursor-not-allowed"
                : "bg-[#3498db] hover:bg-[#2980b9]"
            }`}
          >
            {loading && <Loader2 className="animate-spin h-5 w-5" />}
            {loading ? uiText.loadingBtn : uiText.submitBtn}
          </button>

          <button
            type="button"
            onClick={clearForm}
            className="px-6 py-3 bg-[#e74c3c] hover:bg-[#c0392b] text-white rounded-lg font-bold transition min-w-[100px]"
          >
            {uiText.clearBtn}
          </button>
        </div>
      </form>

      {error && (
        <div className="p-4 bg-[#fee] border-l-4 border-[#e74c3c] rounded-md mb-6 shadow">
          <h4 className="text-[#e74c3c] font-semibold mb-1 text-base">
            {uiText.errorTitle}
          </h4>
          <p className="text-[#c0392b] text-sm">{error}</p>
        </div>
      )}

      {response && (
        <div className="p-6 bg-[#f8f9fa] border border-[#e1e8ed] rounded-xl shadow mb-6">
          <h3 className="text-lg font-bold text-[#2c3e50] border-b-2 border-[#3498db] pb-2 mb-4">
            {uiText.resultTitle}
          </h3>
          <p className="whitespace-pre-wrap text-[#34495e] leading-relaxed text-sm mb-4">
            {response}
          </p>

          {sources.length > 0 && (
            <div className="mt-4">
              <h4 className="font-semibold text-gray-800 mb-2">
                {uiText.sourceTitle}
              </h4>
              <ul className="list-disc pl-5 space-y-1 text-blue-600 text-sm">
                {sources.map((src, i) => (
                  <li key={i}>
                    <a
                      href={src.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="hover:underline"
                    >
                      {src.title || src.url}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          )}

          <div className="mt-6 border-t pt-4">
            <h4 className="font-semibold text-gray-800 mb-2">
              {uiText.HospitalText}
            </h4>
            <Link
              href="/hospitalList"
              className="inline-block px-4 py-2 rounded-lg bg-blue-400 text-white text-sm font-medium shadow hover:bg-blue-500 transition"
            >
              {uiText.HospitalLink}
            </Link>
          </div>
        </div>
      )}

      {response && (
        <div className="p-5 bg-[#fff3cd] border border-[#ffeaa7] rounded-lg shadow">
          <h4 className="text-[#856404] font-semibold mb-2 text-base">
            {uiText.warningTitle}
          </h4>
          <ul className="list-disc pl-5 text-[#856404] space-y-1 text-sm">
            {uiText.warningItems.map((item, i) => (
              <li key={i}>{item}</li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}
